{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Pre-requisites \u00b6 Kubernetes 1.15 or later. Getting Started \u00b6 Running chaos on your application involves the following steps: Install Litmus Install Chaos Experiments Setup Service Account Annotate your application Prepare ChaosEngine Run Chaos Observe ChaosResults Install Litmus \u00b6 Apply the LitmusChaos Operator manifest: kubectl apply -f https://litmuschaos.github.io/litmus/litmus-operator-v1.13.8.yaml The above command installs all the CRDs, required service account configuration, and chaos-operator. Note : Ensure that you have the right privileges to install the CRDs & setup cluster-wide RBAC policies (by default, the ChaosOperator watches for Chaos CRs across namespaces) Alternatively, you can choose to install it with Helm: Add the LitmusChaos Helm repo helm repo add litmuschaos https://litmuschaos.github.io/litmus-helm/ Create a Litmus namespace in Kubernetes kubectl create ns litmus Install the Litmus Helm chart helm install chaos litmuschaos/litmus --namespace=litmus Note : Litmus uses Kubernetes CRDs to define chaos intent. Helm3 handles CRDs better than Helm2. Before you start running a chaos experiment, verify if Litmus is installed correctly. Verify your installation Verify if the ChaosOperator is running kubectl get pods -n litmus Expected output: chaos-operator-ce-554d6c8f9f-slc8k 1/1 Running 0 6m41s Verify if chaos CRDs are installed kubectl get crds | grep chaos Expected output: chaosengines.litmuschaos.io 2019-10-02T08:45:25Z chaosexperiments.litmuschaos.io 2019-10-02T08:45:26Z chaosresults.litmuschaos.io 2019-10-02T08:45:26Z Verify if the chaos api resources are successfully created in the desired (application) namespace. Note : Sometimes, it can take a few seconds for the resources to be available post the CRD installation kubectl api-resources | grep chaos Expected output: chaosengines litmuschaos.io true ChaosEngine chaosexperiments litmuschaos.io true ChaosExperiment chaosresults litmuschaos.io true ChaosResult NOTE : In this guide, we shall describe the steps to inject pod-delete chaos on an nginx application already deployed in the nginx namespace. If you don't have this setup you can easily create one by running these two commands: Create nginx namespace kubectl create ns nginx . Create nginx deployment in nginx namespace kubectl create deployment nginx --image nginx -n nginx . In all subsequent steps, please follow these instructions by replacing the nginx namespace and labels with that of your application. The ChaosOperator collects some usage metrics (operator installation count & experiment run count) via a google analytics hook. This is done in order to gather chaos trends that will help us to improve the project. However, if you would like to prevent the collection of the same or are operating in an airgapped environment, you can disable it using the procedure suggested here . Install Chaos Experiments \u00b6 Chaos experiments contain the actual chaos details. These experiments are installed on your cluster as Kubernetes CRs. The Chaos Experiments are grouped as Chaos Charts and are published on Chaos Hub . The generic chaos experiments such as pod-delete , container-kill , pod-network-latency are available under Generic Chaos Chart. This is the first chart you are recommended to install. kubectl apply -f https://hub.litmuschaos.io/api/chaos/master?file=charts/generic/experiments.yaml -n nginx Verify if the chaos experiments are installed. kubectl get chaosexperiments -n nginx Setup Service Account \u00b6 A service account should be created to allow chaosengine to run experiments in your application namespace. Copy the following into a rbac.yaml manifest and run kubectl apply -f rbac.yaml to create one such account on the nginx namespace. This serviceaccount has just enough permissions needed to run the pod-delete chaos experiment. NOTE : For rbac samples corresponding to other experiments such as, say, container-kill, please refer the respective experiment folder in the chaos-charts repository. --- apiVersion : v1 kind : ServiceAccount metadata : name : pod-delete-sa namespace : nginx labels : name : pod-delete-sa --- apiVersion : rbac.authorization.k8s.io/v1 kind : Role metadata : name : pod-delete-sa namespace : nginx labels : name : pod-delete-sa rules : - apiGroups : [ \"\" ] resources : [ \"pods\" , \"events\" ] verbs : [ \"create\" , \"list\" , \"get\" , \"patch\" , \"update\" , \"delete\" , \"deletecollection\" ] - apiGroups : [ \"\" ] resources : [ \"pods/exec\" , \"pods/log\" , \"replicationcontrollers\" ] verbs : [ \"create\" , \"list\" , \"get\" ] - apiGroups : [ \"batch\" ] resources : [ \"jobs\" ] verbs : [ \"create\" , \"list\" , \"get\" , \"delete\" , \"deletecollection\" ] - apiGroups : [ \"apps\" ] resources : [ \"deployments\" , \"statefulsets\" , \"daemonsets\" , \"replicasets\" ] verbs : [ \"list\" , \"get\" ] - apiGroups : [ \"apps.openshift.io\" ] resources : [ \"deploymentconfigs\" ] verbs : [ \"list\" , \"get\" ] - apiGroups : [ \"argoproj.io\" ] resources : [ \"rollouts\" ] verbs : [ \"list\" , \"get\" ] - apiGroups : [ \"litmuschaos.io\" ] resources : [ \"chaosengines\" , \"chaosexperiments\" , \"chaosresults\" ] verbs : [ \"create\" , \"list\" , \"get\" , \"patch\" , \"update\" ] --- apiVersion : rbac.authorization.k8s.io/v1 kind : RoleBinding metadata : name : pod-delete-sa namespace : nginx labels : name : pod-delete-sa roleRef : apiGroup : rbac.authorization.k8s.io kind : Role name : pod-delete-sa subjects : - kind : ServiceAccount name : pod-delete-sa namespace : nginx Prepare ChaosEngine \u00b6 ChaosEngine connects the application instance to a Chaos Experiment. Copy the following YAML snippet into a file called chaosengine.yaml and update the values of applabel , appns , appkind and experiments as per your choice. Change the chaosServiceAccount to the name of service account created in above previous steps. NOTE: To learn more about the various fields in the ChaosEngine spec and their supported values, refer to Constructing ChaosEngine apiVersion : litmuschaos.io/v1alpha1 kind : ChaosEngine metadata : name : nginx-chaos namespace : nginx spec : appinfo : appns : 'nginx' applabel : 'app=nginx' appkind : 'deployment' # It can be active/stop engineState : 'active' #ex. values: ns1:name=percona,ns2:run=nginx auxiliaryAppInfo : '' chaosServiceAccount : pod-delete-sa # It can be delete/retain jobCleanUpPolicy : 'delete' experiments : - name : pod-delete spec : components : env : # set chaos duration (in sec) as desired - name : TOTAL_CHAOS_DURATION value : '30' # set chaos interval (in sec) as desired - name : CHAOS_INTERVAL value : '10' # pod failures without '--force' & default terminationGracePeriodSeconds - name : FORCE value : 'false' ## percentage of total pods to target - name : PODS_AFFECTED_PERC value : '' Override Default Chaos Experiments Variables \u00b6 From LitmusChaos v1.1.0, the default environment variable values in chaosexperiments can be overridden by specifying them in the chaosengine under experiments.<experiment_name>.spec.components.env with the desired value. In the example below, the TOTAL_CHAOS_DURATION is being set to a desired value based on use-case. ... experiments: - name: pod-delete spec: components: env: - name: TOTAL_CHAOS_DURATION value: '30' Run Chaos \u00b6 Apply the ChaosEngine manifest to trigger the experiment. kubectl apply -f chaosengine.yaml Observe Chaos results \u00b6 Describe the ChaosResult CR to know the status of each experiment. The status.verdict is set to Awaited when the experiment is in progress, eventually changing to either Pass or Fail . NOTE: ChaosResult CR name will be <chaos-engine-name>-<chaos-experiment-name> kubectl describe chaosresult nginx-chaos-pod-delete -n nginx Uninstallation \u00b6 Firstly, delete any active ChaosEngines on the cluster, followed by the deletion of the Operator manifest. kubectl delete chaosengine --all -n <namespace> kubectl delete -f https://litmuschaos.github.io/litmus/litmus-operator-v1.13.8.yaml NOTE Ensure that the chaosengine resources are deleted before removal of the chaos-operator deployment via operator manifest. Failure to do so can cause the uninstall operation to be \"stuck\". Refer to the these steps to resolve this condition and complete the uninstall. Troubleshooting \u00b6 For any issues experienced in running through the the aforementioned steps, refer to the Troubleshooting section. More Chaos Experiments \u00b6 For more details on supported chaos experiments and the steps to run them, refer the respective Experiment docs. Join our community \u00b6 If you have not joined our community, do join us here .","title":"Home"},{"location":"#pre-requisites","text":"Kubernetes 1.15 or later.","title":"Pre-requisites"},{"location":"#getting-started","text":"Running chaos on your application involves the following steps: Install Litmus Install Chaos Experiments Setup Service Account Annotate your application Prepare ChaosEngine Run Chaos Observe ChaosResults","title":"Getting Started"},{"location":"#install-litmus","text":"Apply the LitmusChaos Operator manifest: kubectl apply -f https://litmuschaos.github.io/litmus/litmus-operator-v1.13.8.yaml The above command installs all the CRDs, required service account configuration, and chaos-operator. Note : Ensure that you have the right privileges to install the CRDs & setup cluster-wide RBAC policies (by default, the ChaosOperator watches for Chaos CRs across namespaces) Alternatively, you can choose to install it with Helm: Add the LitmusChaos Helm repo helm repo add litmuschaos https://litmuschaos.github.io/litmus-helm/ Create a Litmus namespace in Kubernetes kubectl create ns litmus Install the Litmus Helm chart helm install chaos litmuschaos/litmus --namespace=litmus Note : Litmus uses Kubernetes CRDs to define chaos intent. Helm3 handles CRDs better than Helm2. Before you start running a chaos experiment, verify if Litmus is installed correctly. Verify your installation Verify if the ChaosOperator is running kubectl get pods -n litmus Expected output: chaos-operator-ce-554d6c8f9f-slc8k 1/1 Running 0 6m41s Verify if chaos CRDs are installed kubectl get crds | grep chaos Expected output: chaosengines.litmuschaos.io 2019-10-02T08:45:25Z chaosexperiments.litmuschaos.io 2019-10-02T08:45:26Z chaosresults.litmuschaos.io 2019-10-02T08:45:26Z Verify if the chaos api resources are successfully created in the desired (application) namespace. Note : Sometimes, it can take a few seconds for the resources to be available post the CRD installation kubectl api-resources | grep chaos Expected output: chaosengines litmuschaos.io true ChaosEngine chaosexperiments litmuschaos.io true ChaosExperiment chaosresults litmuschaos.io true ChaosResult NOTE : In this guide, we shall describe the steps to inject pod-delete chaos on an nginx application already deployed in the nginx namespace. If you don't have this setup you can easily create one by running these two commands: Create nginx namespace kubectl create ns nginx . Create nginx deployment in nginx namespace kubectl create deployment nginx --image nginx -n nginx . In all subsequent steps, please follow these instructions by replacing the nginx namespace and labels with that of your application. The ChaosOperator collects some usage metrics (operator installation count & experiment run count) via a google analytics hook. This is done in order to gather chaos trends that will help us to improve the project. However, if you would like to prevent the collection of the same or are operating in an airgapped environment, you can disable it using the procedure suggested here .","title":"Install Litmus"},{"location":"#install-chaos-experiments","text":"Chaos experiments contain the actual chaos details. These experiments are installed on your cluster as Kubernetes CRs. The Chaos Experiments are grouped as Chaos Charts and are published on Chaos Hub . The generic chaos experiments such as pod-delete , container-kill , pod-network-latency are available under Generic Chaos Chart. This is the first chart you are recommended to install. kubectl apply -f https://hub.litmuschaos.io/api/chaos/master?file=charts/generic/experiments.yaml -n nginx Verify if the chaos experiments are installed. kubectl get chaosexperiments -n nginx","title":"Install Chaos Experiments"},{"location":"#setup-service-account","text":"A service account should be created to allow chaosengine to run experiments in your application namespace. Copy the following into a rbac.yaml manifest and run kubectl apply -f rbac.yaml to create one such account on the nginx namespace. This serviceaccount has just enough permissions needed to run the pod-delete chaos experiment. NOTE : For rbac samples corresponding to other experiments such as, say, container-kill, please refer the respective experiment folder in the chaos-charts repository. --- apiVersion : v1 kind : ServiceAccount metadata : name : pod-delete-sa namespace : nginx labels : name : pod-delete-sa --- apiVersion : rbac.authorization.k8s.io/v1 kind : Role metadata : name : pod-delete-sa namespace : nginx labels : name : pod-delete-sa rules : - apiGroups : [ \"\" ] resources : [ \"pods\" , \"events\" ] verbs : [ \"create\" , \"list\" , \"get\" , \"patch\" , \"update\" , \"delete\" , \"deletecollection\" ] - apiGroups : [ \"\" ] resources : [ \"pods/exec\" , \"pods/log\" , \"replicationcontrollers\" ] verbs : [ \"create\" , \"list\" , \"get\" ] - apiGroups : [ \"batch\" ] resources : [ \"jobs\" ] verbs : [ \"create\" , \"list\" , \"get\" , \"delete\" , \"deletecollection\" ] - apiGroups : [ \"apps\" ] resources : [ \"deployments\" , \"statefulsets\" , \"daemonsets\" , \"replicasets\" ] verbs : [ \"list\" , \"get\" ] - apiGroups : [ \"apps.openshift.io\" ] resources : [ \"deploymentconfigs\" ] verbs : [ \"list\" , \"get\" ] - apiGroups : [ \"argoproj.io\" ] resources : [ \"rollouts\" ] verbs : [ \"list\" , \"get\" ] - apiGroups : [ \"litmuschaos.io\" ] resources : [ \"chaosengines\" , \"chaosexperiments\" , \"chaosresults\" ] verbs : [ \"create\" , \"list\" , \"get\" , \"patch\" , \"update\" ] --- apiVersion : rbac.authorization.k8s.io/v1 kind : RoleBinding metadata : name : pod-delete-sa namespace : nginx labels : name : pod-delete-sa roleRef : apiGroup : rbac.authorization.k8s.io kind : Role name : pod-delete-sa subjects : - kind : ServiceAccount name : pod-delete-sa namespace : nginx","title":"Setup Service Account"},{"location":"#prepare-chaosengine","text":"ChaosEngine connects the application instance to a Chaos Experiment. Copy the following YAML snippet into a file called chaosengine.yaml and update the values of applabel , appns , appkind and experiments as per your choice. Change the chaosServiceAccount to the name of service account created in above previous steps. NOTE: To learn more about the various fields in the ChaosEngine spec and their supported values, refer to Constructing ChaosEngine apiVersion : litmuschaos.io/v1alpha1 kind : ChaosEngine metadata : name : nginx-chaos namespace : nginx spec : appinfo : appns : 'nginx' applabel : 'app=nginx' appkind : 'deployment' # It can be active/stop engineState : 'active' #ex. values: ns1:name=percona,ns2:run=nginx auxiliaryAppInfo : '' chaosServiceAccount : pod-delete-sa # It can be delete/retain jobCleanUpPolicy : 'delete' experiments : - name : pod-delete spec : components : env : # set chaos duration (in sec) as desired - name : TOTAL_CHAOS_DURATION value : '30' # set chaos interval (in sec) as desired - name : CHAOS_INTERVAL value : '10' # pod failures without '--force' & default terminationGracePeriodSeconds - name : FORCE value : 'false' ## percentage of total pods to target - name : PODS_AFFECTED_PERC value : ''","title":"Prepare ChaosEngine"},{"location":"#override-default-chaos-experiments-variables","text":"From LitmusChaos v1.1.0, the default environment variable values in chaosexperiments can be overridden by specifying them in the chaosengine under experiments.<experiment_name>.spec.components.env with the desired value. In the example below, the TOTAL_CHAOS_DURATION is being set to a desired value based on use-case. ... experiments: - name: pod-delete spec: components: env: - name: TOTAL_CHAOS_DURATION value: '30'","title":"Override Default Chaos Experiments Variables"},{"location":"#run-chaos","text":"Apply the ChaosEngine manifest to trigger the experiment. kubectl apply -f chaosengine.yaml","title":"Run Chaos"},{"location":"#observe-chaos-results","text":"Describe the ChaosResult CR to know the status of each experiment. The status.verdict is set to Awaited when the experiment is in progress, eventually changing to either Pass or Fail . NOTE: ChaosResult CR name will be <chaos-engine-name>-<chaos-experiment-name> kubectl describe chaosresult nginx-chaos-pod-delete -n nginx","title":"Observe Chaos results"},{"location":"#uninstallation","text":"Firstly, delete any active ChaosEngines on the cluster, followed by the deletion of the Operator manifest. kubectl delete chaosengine --all -n <namespace> kubectl delete -f https://litmuschaos.github.io/litmus/litmus-operator-v1.13.8.yaml NOTE Ensure that the chaosengine resources are deleted before removal of the chaos-operator deployment via operator manifest. Failure to do so can cause the uninstall operation to be \"stuck\". Refer to the these steps to resolve this condition and complete the uninstall.","title":"Uninstallation"},{"location":"#troubleshooting","text":"For any issues experienced in running through the the aforementioned steps, refer to the Troubleshooting section.","title":"Troubleshooting"},{"location":"#more-chaos-experiments","text":"For more details on supported chaos experiments and the steps to run them, refer the respective Experiment docs.","title":"More Chaos Experiments"},{"location":"#join-our-community","text":"If you have not joined our community, do join us here .","title":"Join our community"},{"location":"resources/aks-stop/","text":"Azure Instance Stop \u00b6 It contains tunables to execute the azure-instance-stop experiment. This experiment stops the given azure instances matched by AZURE_INSTANCE_NAME and RESOURCE_GROUP . It restarts the instance after waiting for the specified TOTAL_CHAOS_DURATION duration. Common Experiment Tunables \u00b6 Refer the common attributes to tune the common tunables for all the experiments. Stop Instances By Name \u00b6 It contains comma separated list of instance names subjected to instance stop chaos. It can be tuned via AZURE_INSTANCE_NAME ENV. Use the following example to tune this: ## contains the azure instance details apiVersion : litmuschaos.io/v1alpha1 kind : ChaosEngine metadata : name : engine-nginx spec : engineState : \"active\" annotationCheck : \"false\" chaosServiceAccount : azure-instance-stop-sa experiments : - name : azure-instance-stop spec : components : env : # comma separated list of azore instance names - name : AZURE_INSTANCE_NAME value : 'instance-01,instance-02' # name of the resource group - name : RESOURCE_GROUP value : '<resource group of AZURE_INSTANCE_NAME>' - name : TOTAL_CHAOS_DURATION VALUE : '60' Mutiple Iterations Of Chaos \u00b6 The multiple iterations of chaos can be tuned via setting CHAOS_INTERVAL ENV. Which defines the delay between each iteration of chaos. Use the following example to tune this: # defines delay between each successive iteration of the chaos apiVersion : litmuschaos.io/v1alpha1 kind : ChaosEngine metadata : name : engine-nginx spec : engineState : \"active\" annotationCheck : \"false\" chaosServiceAccount : azure-instance-stop-sa experiments : - name : azure-instance-stop spec : components : env : # delay between each iteration of chaos - name : CHAOS_INTERVAL value : '10' # time duration for the chaos execution - name : TOTAL_CHAOS_DURATION VALUE : '60' - name : AZURE_INSTANCE_NAME value : 'instance-01,instance-02' - name : RESOURCE_GROUP value : '<resource group of AZURE_INSTANCE_NAME>'","title":"Aks stop"},{"location":"resources/aks-stop/#azure-instance-stop","text":"It contains tunables to execute the azure-instance-stop experiment. This experiment stops the given azure instances matched by AZURE_INSTANCE_NAME and RESOURCE_GROUP . It restarts the instance after waiting for the specified TOTAL_CHAOS_DURATION duration.","title":"Azure Instance Stop"},{"location":"resources/aks-stop/#common-experiment-tunables","text":"Refer the common attributes to tune the common tunables for all the experiments.","title":"Common Experiment Tunables"},{"location":"resources/aks-stop/#stop-instances-by-name","text":"It contains comma separated list of instance names subjected to instance stop chaos. It can be tuned via AZURE_INSTANCE_NAME ENV. Use the following example to tune this: ## contains the azure instance details apiVersion : litmuschaos.io/v1alpha1 kind : ChaosEngine metadata : name : engine-nginx spec : engineState : \"active\" annotationCheck : \"false\" chaosServiceAccount : azure-instance-stop-sa experiments : - name : azure-instance-stop spec : components : env : # comma separated list of azore instance names - name : AZURE_INSTANCE_NAME value : 'instance-01,instance-02' # name of the resource group - name : RESOURCE_GROUP value : '<resource group of AZURE_INSTANCE_NAME>' - name : TOTAL_CHAOS_DURATION VALUE : '60'","title":"Stop Instances By Name"},{"location":"resources/aks-stop/#mutiple-iterations-of-chaos","text":"The multiple iterations of chaos can be tuned via setting CHAOS_INTERVAL ENV. Which defines the delay between each iteration of chaos. Use the following example to tune this: # defines delay between each successive iteration of the chaos apiVersion : litmuschaos.io/v1alpha1 kind : ChaosEngine metadata : name : engine-nginx spec : engineState : \"active\" annotationCheck : \"false\" chaosServiceAccount : azure-instance-stop-sa experiments : - name : azure-instance-stop spec : components : env : # delay between each iteration of chaos - name : CHAOS_INTERVAL value : '10' # time duration for the chaos execution - name : TOTAL_CHAOS_DURATION VALUE : '60' - name : AZURE_INSTANCE_NAME value : 'instance-01,instance-02' - name : RESOURCE_GROUP value : '<resource group of AZURE_INSTANCE_NAME>'","title":"Mutiple Iterations Of Chaos"},{"location":"resources/ebs-loss/","text":"EBS Loss By ID \u00b6 It contains tunables to execute the ebs-loss-by-id experiment. This experiment detaches the given ebs volume matched by EBS_VOLUME_ID and REGION . It reattached the volume after waiting for the specified TOTAL_CHAOS_DURATION duration. Common and AWS specific tunables \u00b6 Refer the common attributes and AWS specific tunable to tune the common tunables for all experiments and aws specific tunables. Detach Volumes By ID \u00b6 It contains comma separated list of volume IDs subjected to ebs detach chaos. It can be tuned via EBS_VOLUME_ID ENV. Use the following example to tune this: # contains ebs volume id apiVersion : litmuschaos.io/v1alpha1 kind : ChaosEngine metadata : name : engine-nginx spec : engineState : \"active\" annotationCheck : \"false\" chaosServiceAccount : ebs-loss-by-id-sa experiments : - name : ebs-loss-by-id spec : components : env : # id of the ebs volume - name : EBS_VOLUME_ID value : 'ebs-vol-1' # region for the ebs volume - name : REGION value : '<region for EBS_VOLUME_ID>' - name : TOTAL_CHAOS_DURATION VALUE : '60'","title":"Ebs loss"},{"location":"resources/ebs-loss/#ebs-loss-by-id","text":"It contains tunables to execute the ebs-loss-by-id experiment. This experiment detaches the given ebs volume matched by EBS_VOLUME_ID and REGION . It reattached the volume after waiting for the specified TOTAL_CHAOS_DURATION duration.","title":"EBS Loss By ID"},{"location":"resources/ebs-loss/#common-and-aws-specific-tunables","text":"Refer the common attributes and AWS specific tunable to tune the common tunables for all experiments and aws specific tunables.","title":"Common and AWS specific tunables"},{"location":"resources/ebs-loss/#detach-volumes-by-id","text":"It contains comma separated list of volume IDs subjected to ebs detach chaos. It can be tuned via EBS_VOLUME_ID ENV. Use the following example to tune this: # contains ebs volume id apiVersion : litmuschaos.io/v1alpha1 kind : ChaosEngine metadata : name : engine-nginx spec : engineState : \"active\" annotationCheck : \"false\" chaosServiceAccount : ebs-loss-by-id-sa experiments : - name : ebs-loss-by-id spec : components : env : # id of the ebs volume - name : EBS_VOLUME_ID value : 'ebs-vol-1' # region for the ebs volume - name : REGION value : '<region for EBS_VOLUME_ID>' - name : TOTAL_CHAOS_DURATION VALUE : '60'","title":"Detach Volumes By ID"},{"location":"resources/ec2-stop/","text":"EC2 Terminate By ID \u00b6 It contains tunables to execute the ec2-terminate-by-id experiment. This experiment stops the given ec2 instance matched by EC2_INSTANCE_ID and REGION . It restarts the instance after waiting for the specified TOTAL_CHAOS_DURATION duration. Common and AWS specific tunables \u00b6 Refer the common attributes and AWS specific tunable to tune the common tunables for all experiments and aws specific tunables. Stop Instances By ID \u00b6 It contains comma separated list of instances IDs subjected to ec2 stop chaos. It can be tuned via EC2_INSTANCE_ID ENV. Use the following example to tune this: # contains the instance id, to be terminated/stopped apiVersion : litmuschaos.io/v1alpha1 kind : ChaosEngine metadata : name : engine-nginx spec : engineState : \"active\" annotationCheck : \"false\" chaosServiceAccount : ec2-terminate-by-id-sa experiments : - name : ec2-terminate-by-id spec : components : env : # id of the ec2 instance - name : EC2_INSTANCE_ID value : 'instance-1' # region for the ec2 instance - name : REGION value : '<region for EC2_INSTANCE_ID>' - name : TOTAL_CHAOS_DURATION VALUE : '60'","title":"EC2 Terminate By ID"},{"location":"resources/ec2-stop/#ec2-terminate-by-id","text":"It contains tunables to execute the ec2-terminate-by-id experiment. This experiment stops the given ec2 instance matched by EC2_INSTANCE_ID and REGION . It restarts the instance after waiting for the specified TOTAL_CHAOS_DURATION duration.","title":"EC2 Terminate By ID"},{"location":"resources/ec2-stop/#common-and-aws-specific-tunables","text":"Refer the common attributes and AWS specific tunable to tune the common tunables for all experiments and aws specific tunables.","title":"Common and AWS specific tunables"},{"location":"resources/ec2-stop/#stop-instances-by-id","text":"It contains comma separated list of instances IDs subjected to ec2 stop chaos. It can be tuned via EC2_INSTANCE_ID ENV. Use the following example to tune this: # contains the instance id, to be terminated/stopped apiVersion : litmuschaos.io/v1alpha1 kind : ChaosEngine metadata : name : engine-nginx spec : engineState : \"active\" annotationCheck : \"false\" chaosServiceAccount : ec2-terminate-by-id-sa experiments : - name : ec2-terminate-by-id spec : components : env : # id of the ec2 instance - name : EC2_INSTANCE_ID value : 'instance-1' # region for the ec2 instance - name : REGION value : '<region for EC2_INSTANCE_ID>' - name : TOTAL_CHAOS_DURATION VALUE : '60'","title":"Stop Instances By ID"},{"location":"resources/gcp-stop/","text":"GCP VM Instance Stop \u00b6 It contains tunables to execute the gcp-vm-instance-stop experiment. This experiment stops the given gcp instances and restarts them after waiting for the specified TOTAL_CHAOS_DURATION duration. Common Experiment Tunables \u00b6 Refer the common attributes to tune the common tunables for all the experiments. Target GCP Instances \u00b6 It will stop all the instances with the given VM_INSTANCE_NAMES instance names and corresponding INSTANCE_ZONES zone names in GCP_PROJECT_ID project. NOTE: The VM_INSTANCE_NAMES contains multiple comma-separated vm instances. The comma-separated zone names should be provided in the same order as instance names. Use the following example to tune this: ## details of the gcp instance apiVersion : litmuschaos.io/v1alpha1 kind : ChaosEngine metadata : name : engine-nginx spec : engineState : \"active\" annotationCheck : \"false\" chaosServiceAccount : gcp-vm-instance-stop-sa experiments : - name : gcp-vm-instance-stop spec : components : env : # comma separated list of vm instance names - name : VM_INSTANCE_NAMES value : 'instance-01,instance-02' # comma separated list of zone names corresponds to the VM_INSTANCE_NAMES # it should be provided in same order of VM_INSTANCE_NAMES - name : INSTANCE_ZONES value : 'zone-01,zone-02' # gcp project id to which vm instance belongs - name : GCP_PROJECT_ID value : 'project-id' - name : TOTAL_CHAOS_DURATION VALUE : '60' Autoscaling NodeGroup \u00b6 If vm instances belong to the autoscaling group then provide the AUTO_SCALING_GROUP as enable else provided it as disable . The default value of AUTO_SCALING_GROUP is disable . Use the following example to tune this: ## scale up and down to maintain the available instance counts apiVersion : litmuschaos.io/v1alpha1 kind : ChaosEngine metadata : name : engine-nginx spec : engineState : \"active\" annotationCheck : \"false\" chaosServiceAccount : gcp-vm-instance-stop-sa experiments : - name : gcp-vm-instance-stop spec : components : env : # tells if instances are part of autoscaling group # supports: enable, disable. default: disable - name : AUTO_SCALING_GROUP value : 'enable' # comma separated list of vm instance names - name : VM_INSTANCE_NAMES value : 'instance-01,instance-02' # comma separated list of zone names corresponds to the VM_INSTANCE_NAMES # it should be provided in same order of VM_INSTANCE_NAMES - name : INSTANCE_ZONES value : 'zone-01,zone-02' # gcp project id to which vm instance belongs - name : GCP_PROJECT_ID value : 'project-id' - name : TOTAL_CHAOS_DURATION VALUE : '60' Mutiple Iterations Of Chaos \u00b6 The multiple iterations of chaos can be tuned via setting CHAOS_INTERVAL ENV. Which defines the delay between each iteration of chaos. Use the following example to tune this: # defines delay between each successive iteration of the chaos apiVersion : litmuschaos.io/v1alpha1 kind : ChaosEngine metadata : name : engine-nginx spec : engineState : \"active\" annotationCheck : \"false\" chaosServiceAccount : gcp-vm-instance-stop-sa experiments : - name : gcp-vm-instance-stop spec : components : env : # delay between each iteration of chaos - name : CHAOS_INTERVAL value : '15' # time duration for the chaos execution - name : TOTAL_CHAOS_DURATION VALUE : '60' - name : VM_INSTANCE_NAMES value : 'instance-01,instance-02' - name : INSTANCE_ZONES value : 'zone-01,zone-02' - name : GCP_PROJECT_ID value : 'project-id'","title":"Instance Stop"},{"location":"resources/gcp-stop/#gcp-vm-instance-stop","text":"It contains tunables to execute the gcp-vm-instance-stop experiment. This experiment stops the given gcp instances and restarts them after waiting for the specified TOTAL_CHAOS_DURATION duration.","title":"GCP VM Instance Stop"},{"location":"resources/gcp-stop/#common-experiment-tunables","text":"Refer the common attributes to tune the common tunables for all the experiments.","title":"Common Experiment Tunables"},{"location":"resources/gcp-stop/#target-gcp-instances","text":"It will stop all the instances with the given VM_INSTANCE_NAMES instance names and corresponding INSTANCE_ZONES zone names in GCP_PROJECT_ID project. NOTE: The VM_INSTANCE_NAMES contains multiple comma-separated vm instances. The comma-separated zone names should be provided in the same order as instance names. Use the following example to tune this: ## details of the gcp instance apiVersion : litmuschaos.io/v1alpha1 kind : ChaosEngine metadata : name : engine-nginx spec : engineState : \"active\" annotationCheck : \"false\" chaosServiceAccount : gcp-vm-instance-stop-sa experiments : - name : gcp-vm-instance-stop spec : components : env : # comma separated list of vm instance names - name : VM_INSTANCE_NAMES value : 'instance-01,instance-02' # comma separated list of zone names corresponds to the VM_INSTANCE_NAMES # it should be provided in same order of VM_INSTANCE_NAMES - name : INSTANCE_ZONES value : 'zone-01,zone-02' # gcp project id to which vm instance belongs - name : GCP_PROJECT_ID value : 'project-id' - name : TOTAL_CHAOS_DURATION VALUE : '60'","title":"Target GCP Instances"},{"location":"resources/gcp-stop/#autoscaling-nodegroup","text":"If vm instances belong to the autoscaling group then provide the AUTO_SCALING_GROUP as enable else provided it as disable . The default value of AUTO_SCALING_GROUP is disable . Use the following example to tune this: ## scale up and down to maintain the available instance counts apiVersion : litmuschaos.io/v1alpha1 kind : ChaosEngine metadata : name : engine-nginx spec : engineState : \"active\" annotationCheck : \"false\" chaosServiceAccount : gcp-vm-instance-stop-sa experiments : - name : gcp-vm-instance-stop spec : components : env : # tells if instances are part of autoscaling group # supports: enable, disable. default: disable - name : AUTO_SCALING_GROUP value : 'enable' # comma separated list of vm instance names - name : VM_INSTANCE_NAMES value : 'instance-01,instance-02' # comma separated list of zone names corresponds to the VM_INSTANCE_NAMES # it should be provided in same order of VM_INSTANCE_NAMES - name : INSTANCE_ZONES value : 'zone-01,zone-02' # gcp project id to which vm instance belongs - name : GCP_PROJECT_ID value : 'project-id' - name : TOTAL_CHAOS_DURATION VALUE : '60'","title":"Autoscaling NodeGroup"},{"location":"resources/gcp-stop/#mutiple-iterations-of-chaos","text":"The multiple iterations of chaos can be tuned via setting CHAOS_INTERVAL ENV. Which defines the delay between each iteration of chaos. Use the following example to tune this: # defines delay between each successive iteration of the chaos apiVersion : litmuschaos.io/v1alpha1 kind : ChaosEngine metadata : name : engine-nginx spec : engineState : \"active\" annotationCheck : \"false\" chaosServiceAccount : gcp-vm-instance-stop-sa experiments : - name : gcp-vm-instance-stop spec : components : env : # delay between each iteration of chaos - name : CHAOS_INTERVAL value : '15' # time duration for the chaos execution - name : TOTAL_CHAOS_DURATION VALUE : '60' - name : VM_INSTANCE_NAMES value : 'instance-01,instance-02' - name : INSTANCE_ZONES value : 'zone-01,zone-02' - name : GCP_PROJECT_ID value : 'project-id'","title":"Mutiple Iterations Of Chaos"},{"location":"resources/node-restart/","text":"Node Restart \u00b6 It contains tunables to execute the node-restart experiment. This experiment restarts the given node for the specified TOTAL_CHAOS_DURATION duration. Common and Node specific tunables \u00b6 Refer the common attributes and Node specific tunable to tune the common tunables for all experiments and node specific tunables. Reboot Command \u00b6 It defines the command used to restart the targeted node. It can be tuned via REBOOT_COMMAND ENV. Use the following example to tune this: # provide the reboot command apiVersion : litmuschaos.io/v1alpha1 kind : ChaosEngine metadata : name : engine-nginx spec : engineState : \"active\" annotationCheck : \"false\" chaosServiceAccount : node-restart-sa experiments : - name : node-restart spec : components : env : # command used for the reboot - name : REBOOT_COMMAND value : 'sudo systemctl reboot' # name of the target node - name : TARGET_NODE value : 'node01' - name : TOTAL_CHAOS_DURATION VALUE : '60' SSH User \u00b6 It defines the name of the SSH user for the targeted node. It can be tuned via SSH_USER ENV. Use the following example to tune this: # name of the ssh user used to ssh into targeted node apiVersion : litmuschaos.io/v1alpha1 kind : ChaosEngine metadata : name : engine-nginx spec : engineState : \"active\" annotationCheck : \"false\" chaosServiceAccount : node-restart-sa experiments : - name : node-restart spec : components : env : # name of the ssh user - name : SSH_USER value : 'root' # name of the target node - name : TARGET_NODE value : 'node01' - name : TOTAL_CHAOS_DURATION VALUE : '60' Target Node Internal IP \u00b6 It defines the internal IP of the targeted node. It is an optional field, if internal IP is not provided then it will derive the internal IP of the targeted node. It can be tuned via TARGET_NODE_IP ENV. Use the following example to tune this: # internal ip of the targeted node apiVersion : litmuschaos.io/v1alpha1 kind : ChaosEngine metadata : name : engine-nginx spec : engineState : \"active\" annotationCheck : \"false\" chaosServiceAccount : node-restart-sa experiments : - name : node-restart spec : components : env : # internal ip of the targeted node - name : TARGET_NODE_IP value : '<ip of node01>' # name of the target node - name : TARGET_NODE value : 'node01' - name : TOTAL_CHAOS_DURATION VALUE : '60'","title":"Node Restart"},{"location":"resources/node-restart/#node-restart","text":"It contains tunables to execute the node-restart experiment. This experiment restarts the given node for the specified TOTAL_CHAOS_DURATION duration.","title":"Node Restart"},{"location":"resources/node-restart/#common-and-node-specific-tunables","text":"Refer the common attributes and Node specific tunable to tune the common tunables for all experiments and node specific tunables.","title":"Common and Node specific tunables"},{"location":"resources/node-restart/#reboot-command","text":"It defines the command used to restart the targeted node. It can be tuned via REBOOT_COMMAND ENV. Use the following example to tune this: # provide the reboot command apiVersion : litmuschaos.io/v1alpha1 kind : ChaosEngine metadata : name : engine-nginx spec : engineState : \"active\" annotationCheck : \"false\" chaosServiceAccount : node-restart-sa experiments : - name : node-restart spec : components : env : # command used for the reboot - name : REBOOT_COMMAND value : 'sudo systemctl reboot' # name of the target node - name : TARGET_NODE value : 'node01' - name : TOTAL_CHAOS_DURATION VALUE : '60'","title":"Reboot Command"},{"location":"resources/node-restart/#ssh-user","text":"It defines the name of the SSH user for the targeted node. It can be tuned via SSH_USER ENV. Use the following example to tune this: # name of the ssh user used to ssh into targeted node apiVersion : litmuschaos.io/v1alpha1 kind : ChaosEngine metadata : name : engine-nginx spec : engineState : \"active\" annotationCheck : \"false\" chaosServiceAccount : node-restart-sa experiments : - name : node-restart spec : components : env : # name of the ssh user - name : SSH_USER value : 'root' # name of the target node - name : TARGET_NODE value : 'node01' - name : TOTAL_CHAOS_DURATION VALUE : '60'","title":"SSH User"},{"location":"resources/node-restart/#target-node-internal-ip","text":"It defines the internal IP of the targeted node. It is an optional field, if internal IP is not provided then it will derive the internal IP of the targeted node. It can be tuned via TARGET_NODE_IP ENV. Use the following example to tune this: # internal ip of the targeted node apiVersion : litmuschaos.io/v1alpha1 kind : ChaosEngine metadata : name : engine-nginx spec : engineState : \"active\" annotationCheck : \"false\" chaosServiceAccount : node-restart-sa experiments : - name : node-restart spec : components : env : # internal ip of the targeted node - name : TARGET_NODE_IP value : '<ip of node01>' # name of the target node - name : TARGET_NODE value : 'node01' - name : TOTAL_CHAOS_DURATION VALUE : '60'","title":"Target Node Internal IP"},{"location":"resources/pod-delete/","text":"Pod Delete \u00b6 It contains tunables to execute the pod-delete experiment. This experiment deletes the targeted pods for the specified TOTAL_CHAOS_DURATION duration. Common and Pod specific tunables \u00b6 Refer the common attributes and Pod specific tunable to tune the common tunables for all experiments and pod specific tunables. Force Delete \u00b6 The targeted pod can be deleted forcefully or gracefully . It can be tuned with the FORCE env. It will delete the pod forcefully if FORCE is provided as true and it will delete the pod gracefully if FORCE is provided as false . Use the following example to tune this: # tune the deletion of target pods forcefully or gracefully apiVersion : litmuschaos.io/v1alpha1 kind : ChaosEngine metadata : name : engine-nginx spec : engineState : \"active\" annotationCheck : \"false\" appinfo : appns : \"default\" applabel : \"app=nginx\" appkind : \"deployment\" chaosServiceAccount : pod-delete-sa experiments : - name : pod-delete spec : components : env : # provided as true for the force deletion of pod # supports true and false value - name : FORCE value : 'true' - name : TOTAL_CHAOS_DURATION value : '60' Multiple Iterations Of Chaos \u00b6 The multiple iterations of chaos can be tuned via setting CHAOS_INTERVAL ENV. Which defines the delay between each iteration of chaos. Use the following example to tune this: # defines delay between each successive iteration of the chaos apiVersion : litmuschaos.io/v1alpha1 kind : ChaosEngine metadata : name : engine-nginx spec : engineState : \"active\" annotationCheck : \"false\" appinfo : appns : \"default\" applabel : \"app=nginx\" appkind : \"deployment\" chaosServiceAccount : pod-delete-sa experiments : - name : pod-delete spec : components : env : # delay between each iteration of chaos - name : CHAOS_INTERVAL value : '15' # time duration for the chaos execution - name : TOTAL_CHAOS_DURATION VALUE : '60' Random Interval \u00b6 The randomness in the chaos interval can be enabled via setting RANDOMNESS ENV to true . It supports boolean values. The default value is false . The chaos interval can be tuned via CHAOS_INTERVAL ENV. - If CHAOS_INTERVAL is set in the form of l-r i.e, 5-10 then it will select a random interval between l & r. - If CHAOS_INTERVAL is set in the form of value i.e, 10 then it will select a random interval between 0 & value. Use the following example to tune this: # contains random chaos interval with lower and upper bound of range i.e [l,r] apiVersion : litmuschaos.io/v1alpha1 kind : ChaosEngine metadata : name : engine-nginx spec : engineState : \"active\" annotationCheck : \"false\" appinfo : appns : \"default\" applabel : \"app=nginx\" appkind : \"deployment\" chaosServiceAccount : pod-delete-sa experiments : - name : pod-delete spec : components : env : # randomness enables iterations at random time interval # it supports true and false value - name : RANDOMNESS value : 'true' - name : TOTAL_CHAOS_DURATION value : '60' # it will select a random interval within this range # if only one value is provided then it will select a random interval within 0-CHAOS_INTERVAL range - name : CHAOS_INTERVAL value : '5-10'","title":"Pod Delete"},{"location":"resources/pod-delete/#pod-delete","text":"It contains tunables to execute the pod-delete experiment. This experiment deletes the targeted pods for the specified TOTAL_CHAOS_DURATION duration.","title":"Pod Delete"},{"location":"resources/pod-delete/#common-and-pod-specific-tunables","text":"Refer the common attributes and Pod specific tunable to tune the common tunables for all experiments and pod specific tunables.","title":"Common and Pod specific tunables"},{"location":"resources/pod-delete/#force-delete","text":"The targeted pod can be deleted forcefully or gracefully . It can be tuned with the FORCE env. It will delete the pod forcefully if FORCE is provided as true and it will delete the pod gracefully if FORCE is provided as false . Use the following example to tune this: # tune the deletion of target pods forcefully or gracefully apiVersion : litmuschaos.io/v1alpha1 kind : ChaosEngine metadata : name : engine-nginx spec : engineState : \"active\" annotationCheck : \"false\" appinfo : appns : \"default\" applabel : \"app=nginx\" appkind : \"deployment\" chaosServiceAccount : pod-delete-sa experiments : - name : pod-delete spec : components : env : # provided as true for the force deletion of pod # supports true and false value - name : FORCE value : 'true' - name : TOTAL_CHAOS_DURATION value : '60'","title":"Force Delete"},{"location":"resources/pod-delete/#multiple-iterations-of-chaos","text":"The multiple iterations of chaos can be tuned via setting CHAOS_INTERVAL ENV. Which defines the delay between each iteration of chaos. Use the following example to tune this: # defines delay between each successive iteration of the chaos apiVersion : litmuschaos.io/v1alpha1 kind : ChaosEngine metadata : name : engine-nginx spec : engineState : \"active\" annotationCheck : \"false\" appinfo : appns : \"default\" applabel : \"app=nginx\" appkind : \"deployment\" chaosServiceAccount : pod-delete-sa experiments : - name : pod-delete spec : components : env : # delay between each iteration of chaos - name : CHAOS_INTERVAL value : '15' # time duration for the chaos execution - name : TOTAL_CHAOS_DURATION VALUE : '60'","title":"Multiple Iterations Of Chaos"},{"location":"resources/pod-delete/#random-interval","text":"The randomness in the chaos interval can be enabled via setting RANDOMNESS ENV to true . It supports boolean values. The default value is false . The chaos interval can be tuned via CHAOS_INTERVAL ENV. - If CHAOS_INTERVAL is set in the form of l-r i.e, 5-10 then it will select a random interval between l & r. - If CHAOS_INTERVAL is set in the form of value i.e, 10 then it will select a random interval between 0 & value. Use the following example to tune this: # contains random chaos interval with lower and upper bound of range i.e [l,r] apiVersion : litmuschaos.io/v1alpha1 kind : ChaosEngine metadata : name : engine-nginx spec : engineState : \"active\" annotationCheck : \"false\" appinfo : appns : \"default\" applabel : \"app=nginx\" appkind : \"deployment\" chaosServiceAccount : pod-delete-sa experiments : - name : pod-delete spec : components : env : # randomness enables iterations at random time interval # it supports true and false value - name : RANDOMNESS value : 'true' - name : TOTAL_CHAOS_DURATION value : '60' # it will select a random interval within this range # if only one value is provided then it will select a random interval within 0-CHAOS_INTERVAL range - name : CHAOS_INTERVAL value : '5-10'","title":"Random Interval"}]}